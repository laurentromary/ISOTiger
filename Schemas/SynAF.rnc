default namespace = "http://www.iso.org/ns/SynAF"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.iso.org/ns/DCR"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2014-12-02T09:42:00Z. 
# Edition: Version 2.7.0. Last updated on
#	16th September 2014, revision 13036
# Edition Location: http://www.tei-c.org/Vault/P5/Version 2.7.0/
#

# CC-BY

sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
att.global.linking.attributes =
  att.global.linking.attribute.corresp,
  att.global.linking.attribute.synch,
  att.global.linking.attribute.sameAs,
  att.global.linking.attribute.copyOf,
  att.global.linking.attribute.next,
  att.global.linking.attribute.prev,
  att.global.linking.attribute.exclude,
  att.global.linking.attribute.select
att.global.linking.attribute.corresp =
  
  ## (corresponds) points to elements that correspond to the current element in some way.
  attribute corresp {
    list { empty }
  }?
att.global.linking.attribute.synch =
  
  ## (synchronous) points to elements that are synchronous with the current element.
  attribute synch {
    list { empty }
  }?
att.global.linking.attribute.sameAs =
  
  ## points to an element that is the same as the current element.
  attribute sameAs { text }?
att.global.linking.attribute.copyOf =
  
  ## points to an element of which the current element is a copy.
  attribute copyOf { text }?
att.global.linking.attribute.next =
  
  ## points to the next element of a virtual aggregate of which the current element is part.
  attribute next { text }?
att.global.linking.attribute.prev =
  
  ## (previous) points to the previous element of a virtual aggregate of which the current element is part.
  attribute prev { text }?
att.global.linking.attribute.exclude =
  
  ## points to elements that are in exclusive alternation with the current element.
  attribute exclude {
    list { empty }
  }?
att.global.linking.attribute.select =
  
  ## selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.
  attribute select {
    list { empty }
  }?
link =
  
  ## defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements. [16.1. ]
  element link {
    empty
    >> sch:pattern [
         id = "SynAF-link-linkTargets3-constraint-1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(normalize-space(@target),' ')"
             "You must supply at least two values for @target or  on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.pointing.attributes,
    att.typed.attributes,
    empty
  }
when =
  
  ## indicates a point in time either relative to other elements in the same timeline tag, or absolutely. [16.5.2. ]
  element when {
    empty,
    
    ## supplies an absolute value for the time.
    attribute absolute { text }?,
    
    ## specifies the unit of time in which the interval value is expressed, if this is not inherited from the parent timeline.
    ## Suggested values include: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies a time interval either as a number or as one of the keywords defined by the datatype data.interval
    attribute interval { text }?,
    
    ## identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point.
    attribute since { text }?,
    empty
  }
join =
  
  ## identifies a possibly fragmented segment of text, by pointing at the possibly discontiguous elements which compose it. [16.7. ]
  element join {
    (empty*)
    >> sch:pattern [
         id = "SynAF-join-joinTargets3-constraint-2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@target,' ')"
             "\x{a}" ~
             "You must supply at least two values for @target on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.pointing.attributes,
    att.typed.attributes,
    
    ## specifies the name of an element which this aggregation may be understood to represent.
    attribute result { text }?,
    
    ## indicates whether the targets to be joined include the entire element indicated (the entire subtree including its root), or just the children of the target (the branches of the subtree).
    [ a:defaultValue = "root" ]
    attribute scope {
      
      ## the rooted subtrees indicated by the target attribute are joined, each subtree become a child of the virtual element created by the join
      "root"
      | 
        ## the children of the subtrees indicated by the target attribute become the children of the virtual element (i.e. the roots of the subtrees are discarded)
        "branches"
    }?,
    empty
  }
alt =
  
  ## (alternation) identifies an alternation or a set of choices among elements or passages. [16.8. ]
  element alt {
    empty,
    att.pointing.attribute.idref,
    att.typed.attributes,
    
    ## specifies the destination of the reference by supplying one or more URI References
    attribute target {
      list { empty }
    }?,
    
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    
    ## If mode is , each weight states the probability that the corresponding alternative occurs. If mode is incl each weight states the probability that the corresponding alternative occurs given that at least one of the other alternatives occurs.
    attribute weights {
      list { empty }
    }?,
    empty
  }
corpus =
  
  ## (Syntactic Annotation Collection) Contains all declarations and annotations for a SynAF-Tiger conformant document
  element corpus {
    head?,
    body,
    subcorpus*,
    
    ## (Tiger version) Version of the Tiger format used in the document
    attribute tiger_version { text }?,
    empty
  }
head =
  
  ## (Global Information) Represents technical and administrative information applying to the entire multilingual data collection.
  element head {
    meta*,
    annotation*,
    
    ##
    attribute external { xsd:anyURI }?,
    empty
  }
meta =
  
  ## (Metadata Component) Groups all information associated to the general description and management of the annotation document
  element meta {
    (name | author | date | description | format | history)*,
    att.id.attributes,
    att.named.attributes,
    empty
  }
name =
  
  ## (...) ...
  element name { text, att.id.attributes, att.named.attributes, empty }
format =
  
  ## (...) ...
  element format {
    text, att.id.attributes, att.named.attributes, empty
  }
author =
  
  ## (Author) the person responsible for the creation of the content.
  element author {
    text, att.id.attributes, att.named.attributes, empty
  }
date =
  
  ## (Date) a date.
  element date { text, att.id.attributes, att.named.attributes, empty }
description =
  
  ## (...) ...
  element description {
    text, att.id.attributes, att.named.attributes, empty
  }
history =
  
  ## (...) ...
  element history {
    text, att.id.attributes, att.named.attributes, empty
  }
annotation =
  
  ## (History Component) This generic component allows to trace modifications on the component it is anchored to (i.e. versioning).
  element annotation {
    (feature | edgelabel | secedgelabel)*,
    att.id.attributes,
    att.named.attributes,
    empty
  }
edgelabel =
  
  ## (Edge label) ...
  element edgelabel {
    value*, att.id.attributes, att.typed.attributes, empty
  }
secedgelabel =
  
  ## (History Component) This generic component allows to trace modifications on the component it is anchored to (i.e. versioning).
  element secedgelabel { value*, att.id.attributes, empty }
body =
  
  ## (Body) Contains all annotations annotations
  element body { s*, att.id.attributes, empty }
subcorpus =
  
  ## (Subcorpus) Contains all annotations annotations
  element subcorpus {
    (head?, body, subcorpus*), att.id.attributes, empty
  }
s =
  
  ## (Segment) Groups together all annotations for one sentence.
  element s { graph*, att.id.attributes, empty }
graph =
  
  ## (Monolingual Component) Part of a multilingual component (MultiC) containing information related to one language
  element graph {
    (terminals | nonterminals)*,
    att.lang.attributes,
    att.id.attributes,
    att.xlink.attributes,
    
    ## (Word) Indicates the surface form of the token
    attribute word { text }?,
    
    ## (Root) ...
    attribute root { text }?,
    
    ## (Discontinuous) Indicates that the syntactic graph is not fully connected.
    attribute discontinuous { text }?,
    empty
  }
terminals =
  
  ## (Segmentation Component) A recursive component allowing any level of segmentation for textual information.
  element terminals {
    t*,
    att.id.attributes,
    att.xlink.attributes,
    att.linguistic.attributes,
    empty
  }
nonterminals =
  
  ## (Non terminals) Groups together all node and edge corresponding to a single syntactic analysis
  element nonterminals {
    (edge | nt)*, att.id.attributes, att.xlink.attributes, empty
  }
t =
  
  ## (terminal node) represents an ISOTiger terminal node
  element t {
    (secedge | edge)*,
    att.id.attributes,
    att.typed.attributes,
    att.linguistic.attributes,
    att.global.linking.attributes,
    empty
  }
edge =
  
  ## A complete citation of the bibliographic information pertaining to a document or other resource. [ISO 12620:1999]
  element edge {
    text,
    att.id.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    
    ##
    attribute label { text }?,
    
    ##
    attribute func { text }?,
    empty
  }
secedge =
  
  ## A complete citation of the bibliographic information pertaining to a document or other resource. [ISO 12620:1999]
  element secedge {
    text,
    att.id.attributes,
    att.pointing.attributes,
    
    ##
    attribute label { text }?,
    empty
  }
nt =
  
  ## ...
  element nt {
    (edge | secedge)*,
    att.id.attributes,
    att.xlink.attributes,
    att.typed.attributes,
    att.linguistic.attributes,
    
    ##
    attribute cat { text }?,
    empty
  }
att.lang.attributes = att.lang.attribute.lang
att.lang.attribute.lang =
  
  ##
  attribute xml:lang { text }?
att.id.attributes = att.id.attribute.id
att.id.attribute.id =
  
  ##
  attribute xml:id { text }?
att.pointing.attributes =
  att.pointing.attribute.target, att.pointing.attribute.idref
att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { xsd:anyURI+ }
  }?
att.pointing.attribute.idref =
  
  ##
  attribute idref { text }?
att.named.attributes = att.named.attribute.name
att.named.attribute.name =
  
  ##
  attribute name { text }?
att.typed.attributes = att.typed.attribute.type
att.typed.attribute.type =
  
  ##
  attribute type { text }?
att.xlink.attributes =
  att.xlink.attribute.label,
  att.xlink.attribute.href,
  att.xlink.attribute.type,
  att.xlink.attribute.title,
  att.xlink.attribute.from,
  att.xlink.attribute.to
att.xlink.attribute.label =
  
  ## Label of a resource of locator element
  attribute xlink:label { text }?
att.xlink.attribute.href =
  
  ## Supply the data to find a remote resource
  attribute xlink:href { text }?
att.xlink.attribute.type =
  
  ##
  attribute xlink:type { text }?
att.xlink.attribute.title =
  
  ## Human-readable description
  attribute xlink:title { text }?
att.xlink.attribute.from =
  
  ## What resource an arc comes from
  attribute xlink:from { text }?
att.xlink.attribute.to =
  
  ## What resource an arc goes to
  attribute xlink:to { text }?
feature =
  
  ## (Generic placeholder) The genericPlaceholder data category is used to replace any inline code of the original document. [From TMX to be edited] The actual inline data is stored in tag elements in the header of the file. The required xid attribute is used to reference the tag element that contains the replaced code.
  element feature {
    value*,
    att.named.attributes,
    att.typed.attributes,
    
    ##
    attribute domain { text }?,
    
    ##
    attribute ns1:datcat { text }?,
    empty
  }
value =
  
  ## (Placeholder) The placeholder data category is used to delimit a sequence of native standalone codes in the segment, or the initial or ending portion of a paired tag that does not have its matching code within the segment, that contains embedded translatable text.
  element value {
    text,
    att.named.attributes,
    
    ##
    attribute ns1:datcat { text }?,
    empty
  }
att.linguistic.attributes =
  att.linguistic.attribute.pos,
  att.linguistic.attribute.lemma,
  att.linguistic.attribute.stem,
  att.linguistic.attribute.word,
  att.linguistic.attribute.token,
  att.linguistic.attribute.morph
att.linguistic.attribute.pos =
  
  ##
  attribute pos { text }?
att.linguistic.attribute.lemma =
  
  ##
  attribute lemma { text }?
att.linguistic.attribute.stem =
  
  ##
  attribute stem { text }?
att.linguistic.attribute.word =
  
  ## (Word) Indicates the surface form of the token
  attribute word { text }?
att.linguistic.attribute.token =
  
  ## (Token) Points to the surface form of the token
  attribute token { text }?
att.linguistic.attribute.morph =
  
  ## (Morphological features) Provides additional morphological information for the surface token
  attribute morph { text }?
start = corpus
